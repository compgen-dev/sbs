#!/usr/bin/env python
'''
simple batch scheduler - a single user job scheduler
----

A single-user batch scheduler that stores queued job information in a 
local directory. This greatly simplifies trying to run an analysis 
pipeline on a host without a traditional scheduler (SGE, SLURM, PBS) 
installed. Storing the job queue in a directory greatly simplifies 
installation and management because it doesn't require installing a 
separate database or other libraries.

The SBS queue directory (default: ./.sbs) can be changed using the 
environment variable: `$SBSHOME`

Similar to traditional job schedulers, job scripts are submitted as 
runnable scripts with some meta-data: (mem, cpus, dependencies) added 
as comments. Options can be set as command arguments too.

Jobs are then run, respecting memory or cpu limits. The maximum memory
or processors used can be set at run time (default: max number of CPUs
on the host and no memory limits).

Example usage:

    sbs submit job_script1.sh
    sbs submit job_script2.sh
    sbs run

'''

import re
import os
import sys
import glob
import math
import time
import shutil
import signal
import smtplib
import datetime
import subprocess
import multiprocessing

from email.mime.text import MIMEText

version = "1.0.2"
valid = ['help', 'submit', 'status', 'run', 'cancel', 'hold', 'release', 'cleanup', 'shutdown', 'version']
sbshome = os.path.join(os.path.realpath('.'),'.sbs') if not os.environ.get('SBSHOME') else os.environ.get('SBSHOME')

STATE_USERHOLD='U'
STATE_HOLD='H'
STATE_QUEUED='Q'
STATE_RUNNING='R'
STATE_SUCCESS='S'
STATE_ERROR='E'
STATE_CANCEL='C'

inrun = False

def usage(cmd=None):
    if not cmd:
        print __doc__
        print '''
Usage: sbs {-d sbshome} command {options}

Commands:'''
        maxlen = 0
        for cmd in valid:
            maxlen = max(maxlen, len(cmd))

        for cmd in sorted(valid):
            if cmd == 'version':
                continue
            print '  %s%s    %s' % (cmd, ' '*(maxlen-len(cmd)), sys.modules[__name__].__dict__[cmd].__doc__)


    elif cmd == 'submit':
        print submit.__doc__
        print '''
Usage: sbs {-d sbshome} submit {options} job_script (default to stdin)

Options:
  -afterok job1:job2:job3...
                 Job dependencies. Do not run until these jobs have completed (successfully)
  -hold          Wait to run job until released by user
  -mail email    Send an email to this address when job is done (success or error)
  -mem val       Memory to use ('2G', '1000M', etc)
  -name val      Job-name
  -procs N       Number of processors
  -stderr fname  Write stderr to this file
  -stdout fname  Write stdout to this file
  -wd dir        Working directory
        '''

    elif cmd == 'run':
        print run.__doc__
        print '''
Usage: sbs {-d sbshome} run {options}

Options:
  -maxprocs N    Max number of processors
  -maxmem val    Max emory to use ('2G', '1000M', etc)
  -forever       Run forever (until shutdown called)
        '''
    elif cmd == 'hold':
        print hold.__doc__
        print '''
Usage: sbs {-d sbshome} hold jobid
        '''
    elif cmd == 'release':
        print release.__doc__
        print '''
Usage: sbs {-d sbshome} release jobid
        '''
    elif cmd == 'cancel':
        print cancel.__doc__
        print '''
Usage: sbs {-d sbshome} cancel jobid
        '''
    elif cmd == 'status':
        print status.__doc__
        print '''
Usage: sbs {-d sbshome} status {jobid}
        '''
    elif cmd == 'cleanup':
        print cleanup.__doc__
        print '''
Usage: sbs {-d sbshome} cleanup
        '''
    elif cmd == 'shutdown':
        print shutdown.__doc__
        print '''
Usage: sbs {-d sbshome} shutdown

Options:
  -kill          Kill all currently running jobs (default is to 
                 wait until they finish)
        '''

    print ''

    sys.exit(1)


def init():
    if not os.path.exists(sbshome):
        os.makedirs(os.path.join(sbshome, 'running'))
        with open(os.path.join(sbshome, 'next_job_id'), 'w') as out:
            out.write('1\n')


def _lock(name="lock", maxattempts=10):
    locked = False
    trynum = 0

    while not locked:
        try:
            os.mkdir(os.path.join(sbshome, name))
            locked = True
        except:
            trynum += 1
            time.sleep(1)

            if trynum > maxattempts:
                sys.stderr.write("Error getting file lock!\n")
                sys.exit(1)

    return True


def _release_lock(name="lock"):
    os.rmdir(os.path.join(sbshome, name))


def _get_next_jobid():
    _lock()

    jobid = 0
    with open(os.path.join(sbshome, 'next_job_id')) as f:
        jobid = int(f.next().strip())
    with open(os.path.join(sbshome, 'next_job_id'), 'w') as out:
        out.write('%s\n' % (jobid + 1))

    _release_lock()

    return jobid


def submit(fname=None, name=None, procs=1, mem=None, afterok=None, mail=None, hold=False, stdout=None, stderr=None, wd=None):
    'Submit a new job to the queue'

    script_lines = []

    if fname:
        if os.path.exists(fname):
            f = open(fname)
        else:
            sys.stderr.write("Missing job script: %s\n" % fname)
            sys.exit(1)
    else:
        f = sys.stdin

    firstline = True

    for line in f:
        if firstline:
            if line[:2] != '#!':
                script_lines.append('#!/bin/sh\n')
            firstline = False

        if line[:6] == '#SBS -':
            if ' ' in line[6:]:
                cmd, val = line[6:].split(' ', 1)
                val = val.strip()
            else:
                cmd = line[6:]
                val = None

            if cmd == 'name':
                name = re.sub(r'[^a-zA-Z0-9_\-\.]', '_', val) 
            elif cmd == 'mem':
                mem = val
            elif cmd == 'mail':
                mail = val
            elif cmd == 'procs':
                procs = int(val)
            elif cmd == 'afterok':
                afterok = val
            elif cmd == 'hold':
                hold = True
            elif cmd == 'stdout':
                stdout = val
            elif cmd == 'stderr':
                stderr = val
            elif cmd == 'wd':
                wd = val

        script_lines.append(line)

    if afterok:
        for depid in str(afterok).split(':'):
            if not _get_status(int(depid)):
                sys.stderr.write('ERROR: Dependent job %s not found!' % depid)
                sys.exit(1)

    init()
    i=1

    jobid = _get_next_jobid()
    os.makedirs(os.path.join(sbshome, 'sbs.%s' % jobid))

    with open(os.path.join(sbshome, 'sbs.%s' % jobid, 'script'), 'w') as out:
        for line in script_lines:
            out.write(line)

    os.chmod(os.path.join(sbshome, 'sbs.%s' % jobid, 'script'), 0700)

    with open(os.path.join(sbshome, 'sbs.%s' % jobid, 'settings'), 'w') as out:
        if name:
            out.write('%s\t%s\n' % ('name', name))
        if mem:
            out.write('%s\t%s\n' % ('mem', mem))
        if mail:
            out.write('%s\t%s\n' % ('mail', mail))
        if procs > 1:
            out.write('%s\t%s\n' % ('procs', procs))
        if afterok:
            out.write('%s\t%s\n' % ('afterok', afterok))
        if stdout:
            out.write('%s\t%s\n' % ('stdout', stdout)) 
        if stderr:
            out.write('%s\t%s\n' % ('stderr', stderr)) 
        if wd:
            out.write('%s\t%s\n' % ('wd', stderr)) 

    if hold:
        _set_status(jobid, STATE_USERHOLD)
    else:
        _set_status(jobid, STATE_HOLD)

    sys.stdout.write('%s\n' % jobid)


def _get_status(jobid):
    if os.path.exists(os.path.join(sbshome, 'sbs.%s' % jobid, 'state')):
        with open(os.path.join(sbshome, 'sbs.%s' % jobid, 'state')) as f:
            for line in f:
                state, ts = line.strip().split('\t')
            return state
    return None


def _set_status(jobid, status, because_of_jobid=None):
    with open(os.path.join(sbshome, 'sbs.%s' % jobid, 'state'), 'a') as out:
        out.write('%s\t%s\n' % (status, int(time.time())))
        _log_status(jobid, status)

    if _get_job_setting(jobid, "mail"):
        if status == STATE_CANCEL and because_of_jobid:
            _mail(jobid, status, "Job %s was cancelled due to a dependency on job %s" % (jobid, because_of_jobid))
        elif status == STATE_SUCCESS:
            _mail(jobid, status, "Job %s completed successfully" % (jobid,))
        elif status == STATE_ERROR:
            _mail(jobid, status, "Job %s finished, but had an error" % (jobid,))
        elif status == STATE_CANCEL:
            _mail(jobid, status, "Job %s was cancelled by a user (probably you)." % (jobid,))
        elif status == STATE_RUNNING:
            _mail(jobid, status, "Job %s started." % (jobid,))


def _mail(jobid, status, body):
    msgtxt = """
%s

[history]
""" % (body,)

    submit=_get_status_time(jobid, STATE_HOLD)

    msgtxt += "Submitted: %s\n" % datetime.datetime.fromtimestamp(submit)

    if status in [STATE_RUNNING, STATE_CANCEL, STATE_ERROR, STATE_SUCCESS]:
        queued=_get_status_time(jobid, STATE_QUEUED)
        started=_get_status_time(jobid, STATE_RUNNING)
        msgtxt += "Queued   : %s\n" % (datetime.datetime.fromtimestamp(queued))
        msgtxt += "Started  : %s\n" % (datetime.datetime.fromtimestamp(started))

        if status in [STATE_CANCEL, STATE_ERROR, STATE_SUCCESS]:
            done=_get_status_time(jobid, status)
            msgtxt += "Finished : %s\n" % (datetime.datetime.fromtimestamp(done))
            msgtxt += "Run-time : %s\n" % (_duration(started, done))
        else:
            msgtxt += "Wait-time: %s\n" % (_duration(queued, started))



    msg = MIMEText(msgtxt)
    cmd = ['mail', '-s', 'Job %s' % jobid, _get_job_setting(jobid, 'mail')]

    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE)
    proc.communicate(msg.as_string())
    proc.wait()


def _duration(start, end):
    elapsed = int(end-start)

    if elapsed > (60*60):
        hours = int(elapsed / (60*60))
        elapsed = elapsed - (hours * 60*60)
        minutes = int(elapsed / 60)
        elapsed = elapsed - (minutes * 60)

        return "%s:%s:%s" % ('0%s' % hours if hours < 10 else '%s' % hours,
                             '0%s' % minutes if minutes < 10 else '%s' % minutes,
                             '0%s' % elapsed if elapsed < 10 else '%s' % elapsed,
                            )

    else:
        minutes = int(elapsed / 60)
        elapsed = elapsed - (minutes * 60)

        return "00:%s:%s" % ('0%s' % minutes if minutes < 10 else '%s' % minutes,
                             '0%s' % elapsed if elapsed < 10 else '%s' % elapsed,
                            )


        return 


def _get_status_time(jobid, state):
    with open(os.path.join(sbshome, 'sbs.%s' % jobid, 'state')) as f:
        for line in f:
            st, ts = line.strip().split('\t')
            if st == state:
                return math.floor(float(ts))

    return -1

def _run_log(msg):
    if inrun:
        sys.stderr.write('%s %s\n' % (datetime.datetime.fromtimestamp(int(time.time())), msg))

def _log_status(jobid, status):
    _run_log('[job:%s] status changed %s' % (jobid, status))


def status(jobid=None):
    'Get the run status of a job (run state)'
    init()

    jobinfo = [('job-id', 'job-name', 'status', 'submit', 'start', 'end'),]
    if not jobid:
        jobdirs = glob.glob(os.path.join(sbshome, 'sbs.*'))
    else:
        jobdirs = [os.path.join(sbshome,  'sbs.%s' % jobid)]

    for jobdir in jobdirs:
        jobid = int(os.path.basename(jobdir)[4:])

        if os.path.exists(os.path.join(sbshome, 'sbs.%s' % jobid)):
            submit_ts = ''
            start_ts = ''
            end_ts = ''
            jobname = _get_job_name(jobid)
            status = _get_status(jobid)
            submit_ts = _get_status_time(jobid, STATE_HOLD)

            outcols = [jobid, jobname, status, datetime.datetime.fromtimestamp(submit_ts)]

            if status in [STATE_HOLD, STATE_USERHOLD, STATE_QUEUED]:
                outcols.append('')
                outcols.append('')

            elif status == STATE_RUNNING:
                start_ts = _get_status_time(jobid, STATE_RUNNING)
                elapsed = _duration(start_ts, time.time())
                outcols.append(datetime.datetime.fromtimestamp(start_ts))
                outcols.append(elapsed)

            elif status == STATE_SUCCESS:
                start_ts = _get_status_time(jobid, STATE_RUNNING)
                end_ts = _get_status_time(jobid, STATE_SUCCESS)
                outcols.append(datetime.datetime.fromtimestamp(start_ts))
                outcols.append(datetime.datetime.fromtimestamp(end_ts))

            elif status == STATE_CANCEL:
                start_ts = _get_status_time(jobid, STATE_RUNNING)
                end_ts = _get_status_time(jobid, STATE_CANCEL)
                outcols.append('')
                outcols.append(datetime.datetime.fromtimestamp(end_ts))

            elif status == STATE_ERROR:
                start_ts = _get_status_time(jobid, STATE_RUNNING)
                end_ts = _get_status_time(jobid, STATE_ERROR)
                outcols.append(datetime.datetime.fromtimestamp(start_ts))
                outcols.append(datetime.datetime.fromtimestamp(end_ts))

            jobinfo.append(outcols)

    maxlen = [0,0,0,0,0,0]
    for info in jobinfo:
        maxlen = [max(len(x) if x else 0,y) for x,y in zip([str(x) for x in info], maxlen)]

    for info in [jobinfo[0]]:
        tmp = [str(x) for x in info]
        out = [
            tmp[0] + ' '* (maxlen[0] - len(tmp[0])),
            tmp[1] + ' '* (maxlen[1] - len(tmp[1])),
            tmp[2] + ' '* (maxlen[2] - len(tmp[2])),
            tmp[3] + ' '* (maxlen[3] - len(tmp[3])),
            tmp[4] + ' '* (maxlen[4] - len(tmp[4])),
            tmp[5] + ' '* (maxlen[5] - len(tmp[5])),
        ]

        sys.stdout.write('%s\n' % '   '.join(out))

    for info in sorted(jobinfo[1:]):
        tmp = [str(x) for x in info]
        out = [
            tmp[0] + ' '* (maxlen[0] - len(tmp[0])),
            tmp[1] + ' '* (maxlen[1] - len(tmp[1])),
            tmp[2] + ' '* (maxlen[2] - len(tmp[2])),
            tmp[3] + ' '* (maxlen[3] - len(tmp[3])),
            tmp[4] + ' '* (maxlen[4] - len(tmp[4])),
            tmp[5] + ' '* (maxlen[5] - len(tmp[5])),
        ]

        sys.stdout.write('%s\n' % '   '.join(out))
    


def cancel(*jobids):
    'Cancel a job'

    for jobid in jobids:
        curstate = _get_status(jobid)

        _set_status(jobid, STATE_CANCEL)

        if curstate not in [STATE_ERROR, STATE_SUCCESS, STATE_CANCEL]:
            if curstate == STATE_RUNNING:
                sys.stdout.write("%s stopped" % jobid)
                _stop_job(jobid)
            else:
                sys.stdout.write("%s canceled" % jobid)


def hold(*jobids):
    'Hold a job from running until released'
    init()
    for jobid in jobids:
        _set_status(jobid, STATE_USERHOLD)

def release(*jobids):
    'Release a job'
    init()
    for jobid in jobids:
        _set_status(jobid, STATE_HOLD)
    pass

def cleanup(jobid=None):
    'Remove all completed jobs'
    init()

    if jobid:
        jobdirs = [os.path.join(sbshome, 'sbs.%s' % jobid)]
    else:
        jobdirs = glob.glob(os.path.join(sbshome, 'sbs.*'))

    possible = []
    for jobdir in jobdirs:
        if os.path.exists(jobdir):
            jobid = int(os.path.basename(jobdir)[4:])

            if _get_status(jobid) in [STATE_ERROR, STATE_CANCEL, STATE_SUCCESS]:
                possible.append(jobid)

    for jobid in possible:
        # check for children
        found_child = False
        for jobdir in glob.glob(os.path.join(sbshome, 'sbs.*')):
            testid = int(os.path.basename(jobdir)[4:])
            if _get_status(testid) in [STATE_HOLD, STATE_USERHOLD, STATE_QUEUED]:
                deps = _get_job_depends(testid)
                if jobid in deps:
                    found_child = True

        if not found_child:
            sys.stderr.write("Cleaning up job: %s\n" % jobid)
            shutil.rmtree(os.path.join(sbshome, 'sbs.%s' % jobid))
        else:
            sys.stderr.write("Keeping job: %s (depenency found)\n" % jobid)


def _get_job_depends_on(jobid):
    children = []
    jobdirs = glob.glob(os.path.join(sbshome, 'sbs.*'))
    for jobdir in jobdirs:
        testid = int(os.path.basename(jobdir)[4:])
        deps = _get_job_depends(testid)
        if jobid in deps:
            children.append(jobid)

    return children


def _stop_job(jobid):
    with open(os.path.join(sbshome, 'sbs.%s' % jobid,'pid')) as f:
        pid = int(f.next().strip())

    os.kill(pid, signal.SIGKILL)


def _spawn_job(jobid):
    stderr = _get_job_setting(jobid, 'stderr')
    stdout = _get_job_setting(jobid, 'stdout')

    if not stderr:
        stderr = os.path.join(sbshome, 'sbs.%s' % jobid,'stderr')
    if not stdout:
        stdout = os.path.join(sbshome, 'sbs.%s' % jobid,'stdout')

    if os.path.isdir(stdout):
        o = open(os.path.join(stdout, "%s.stdout" % jobid), 'w')
    else:
        o = open(stdout, 'w')

    if os.path.isdir(stderr):
        e = open(os.path.join(stderr, "%s.stderr" % jobid), 'w')
    else:
        e = open(stderr, 'w')

    wd = _get_job_setting(jobid, 'wd')
    if not wd:
        wd = None

    env = os.environ
    env['JOB_ID'] = str(jobid)

    try:
        retcode = subprocess.call([os.path.join(sbshome, 'sbs.%s' % jobid,'script')], shell=True, stdout=o, stderr=e, cwd=wd)
    except KeyboardInterrupt:
        sys.stderr.write('Killing job: %s\n' % jobid)
        retcode = 127
        pass

    o.close()
    e.close()
    _run_log('[job:%s] complete' % (jobid))

    if _get_status(jobid) != STATE_CANCEL:
        if retcode == 0:
            _set_status(jobid, STATE_SUCCESS)
        else:
            _set_status(jobid, STATE_ERROR)

    with open(os.path.join(sbshome, 'sbs.%s' % jobid,'returncode'), 'w') as out:
        out.write('%s\n' % retcode)


def _start_job(jobid):
    _run_log('[job:%s] started' % jobid)
    with open(os.path.join(sbshome, 'running', 'sbs.%s' % jobid), 'w') as out:
        out.write('')

    p = multiprocessing.Process(target=_spawn_job, args=(jobid,))
    p.start()
    with open(os.path.join(sbshome, 'sbs.%s' % jobid,'pid'), 'w') as out:
        out.write('%s\n' % p.pid)
    _set_status(jobid, STATE_RUNNING)


def _get_job_depends(jobid):
    afterok = _get_job_setting(jobid, 'afterok')
    if afterok:
        return [int(x) for x in afterok.split(':')]
    return []


def _get_job_name(jobid):
    name = _get_job_setting(jobid, 'name')
    if name:
        return name
    return 'sbs.%s' % jobid


def _get_job_procs(jobid):
    procs = _get_job_setting(jobid, 'procs')
    if procs:
        return int(procs)
    return 1


def _get_job_setting(jobid, setting):
    with open(os.path.join(sbshome, 'sbs.%s' % jobid, 'settings')) as f:
        for line in f:
            k, v = line.strip().split('\t')
            if k == setting:
                return v
    return ''


def _get_job_mem(jobid):
    mem = _get_job_setting(jobid, 'mem')
    if mem:
        return _convert_mem_mb(mem)
    return 0


def _check_valid_jobs():
    valid = False
    for jobid in glob.glob(os.path.join(sbshome, 'sbs.*')):
        jobid = int(os.path.basename(jobid)[4:])
        if _get_status(jobid) in [STATE_HOLD, STATE_RUNNING, STATE_QUEUED, STATE_USERHOLD]:
            valid = True

    return valid


def _check_deps():
    for jobid in glob.glob(os.path.join(sbshome, 'sbs.*')):
        jobid = int(os.path.basename(jobid)[4:])
        if _get_status(jobid) == STATE_HOLD:
            good_to_go = True
            error = False
            cancel = False
            because_of_jobid = None
            for depid in _get_job_depends(jobid):
                dep_stat = _get_status(depid)
                if dep_stat and dep_stat != STATE_SUCCESS:  ## if dep_stat is None, the job doesn't
                    good_to_go = False                      ## exist and we assume it was good.
                
                if dep_stat == STATE_ERROR:
                    because_of_jobid = depid
                    error = True
                elif dep_stat == STATE_CANCEL:
                    because_of_jobid = depid
                    cancel = True

            if error:
                # we will just cancel children, not mark them as errored
                _set_status(jobid, STATE_CANCEL, because_of_jobid)
            elif cancel:
                _set_status(jobid, STATE_CANCEL, because_of_jobid)
            elif good_to_go:
                _set_status(jobid, STATE_QUEUED)


def _convert_mem_mb(mem_str):
    if not mem_str:
        return -1

    if mem_str[-1] == 'M':
        return int(mem_str[:-1])
    if mem_str[-1] == 'G':
        return int(mem_str[:-1])*1000

    return int(mem_str)


def _get_job_to_run(avail_procs, avail_mem):
    'returns tuple (jobid, job_procs, job_mem)'
    #sys.stderr.write('looking for a job  avail procs: %s, avail mem: %s\n' % (avail_procs, avail_mem))

    jobids = []
    for jobdir in glob.glob(os.path.join(sbshome, 'sbs.*')):
        jobids.append(int(os.path.basename(jobdir)[4:]))

    for jobid in sorted(jobids):
        status = _get_status(jobid)
        if status == STATE_QUEUED:
            job_procs = _get_job_procs(jobid)
            job_mem = _get_job_mem(jobid)
            if  job_procs <= avail_procs:
                if avail_mem < 0 or job_mem < avail_mem:
                    return (jobid, job_procs, job_mem)

    return None


def _get_run_status():
    acc={
        STATE_CANCEL:0,
        STATE_ERROR:0,
        STATE_RUNNING:0,
        STATE_QUEUED:0,
        STATE_RUNNING:0,
        STATE_SUCCESS:0,
        STATE_HOLD:0,
        STATE_USERHOLD:0
    }

    for jobdir in glob.glob(os.path.join(sbshome, 'sbs.*')):
        jobid = int(os.path.basename(jobdir)[4:])
        status = _get_status(jobid)
        acc[status] += 1

    ret = ''

    for k in [STATE_USERHOLD, STATE_HOLD, STATE_QUEUED, STATE_RUNNING, STATE_SUCCESS, STATE_ERROR, STATE_CANCEL]:
        ret+='%s:%s ' % (k, acc[k])

    return ret.strip()


def run(maxprocs=0, maxmem='', daemonize=False, forever=False):
    'Start running jobs'

    ## TODO: Add daemon-mode?

    init()
    _lock("run.lock")
    global inrun
    inrun = True
    if not maxprocs:
        maxprocs = multiprocessing.cpu_count()

    avail_procs = maxprocs
    avail_mem = _convert_mem_mb(maxmem)

    changed = True
    laststat = None

    # there might be existing running job (run log) so, we need to adjust avail
    for running_jobid in glob.glob(os.path.join(sbshome, 'running', 'sbs.*')):
        jobid = int(os.path.basename(running_jobid)[4:])
        avail_procs -= _get_job_procs(jobid)
        if avail_mem > 0:
            avail_mem -= _get_job_mem(jobid)


    try:
        while True:
            if os.path.exists(os.path.join(sbshome,'shutdown')):
                with open(os.path.join(sbshome,'shutdown')) as f:
                    killme = False
                    for line in f:
                        if line.strip() == 'kill':
                            killme = True

                    if killme:
                        _run_log("shutting down server (killing running jobs)")
                        for running_jobid in glob.glob(os.path.join(sbshome, 'running', 'sbs.*')):
                            jobid = int(os.path.basename(running_jobid)[4:])
                            _run_log("  killing job: %s" % jobid)
                            _set_status(jobid, STATE_CANCEL)
                            _stop_job(jobid)
                    else:
                        _run_log("shutting down server (waiting for spawned jobs to finish)")


                os.remove(os.path.join(sbshome,'shutdown'))
                break

            changed = False

            for running_jobid in glob.glob(os.path.join(sbshome, 'running', 'sbs.*')):
                jobid = int(os.path.basename(running_jobid)[4:])

#                sys.stderr.write("Job %s (%s)\n" % (jobid, _get_status(jobid)))

                if _get_status(jobid) != STATE_RUNNING:
                    _run_log('[job:%s] releasing %s procs' % (jobid, _get_job_procs(jobid)))
                    avail_procs += _get_job_procs(jobid)
                    if avail_mem > 0:
                        avail_mem += _get_job_mem(jobid)

                    os.remove(running_jobid)
                    changed = True

            newstat =  '%s (procs:%s, mem:%s)' % (_get_run_status(), avail_procs, avail_mem)
            if newstat != laststat or changed:
                _run_log(newstat)
                laststat = newstat

            if not forever and not _check_valid_jobs():
                _run_log("shutting down server (no remaining jobs)")
                break

            _check_deps()
            job_to_run = _get_job_to_run(avail_procs, avail_mem)  # tuple(jobid, procs, meme) or None

            while job_to_run and avail_procs > 0:
                _run_log('[job:%s] reserving %s procs' % (job_to_run[0], job_to_run[1]))
                avail_procs -= job_to_run[1]
                if avail_mem > 0:
                    avail_mem -= job_to_run[2]
                _start_job(job_to_run[0])
                job_to_run = _get_job_to_run(avail_procs, avail_mem)
                changed = True

            if not changed:
                time.sleep(10)
    except KeyboardInterrupt:
        pass

    _release_lock("run.lock")


def shutdown(kill=False):
    'Stop running jobs (and cancel any currently running jobs)'
    init()
    with open(os.path.join(sbshome,'shutdown'),'w') as out:
        out.write('kill\n' if kill else '')


def help(cmd=None):
    'Help for a particular command'

    if cmd and cmd in valid:
        usage(cmd)
    else:
        usage()

    pass


if __name__ == '__main__':
    if len(sys.argv) < 2 or (sys.argv[1] not in valid and sys.argv[1] != '-d'):
        usage()

    if sys.argv[1] == '-d':
        sbshome = sys.argv[2]

        cmd = sys.argv[3]
        args = sys.argv[4:]
    else:
        cmd = sys.argv[1]
        args = sys.argv[2:]

    cmd_kwargs = {}
    cmd_args = []

    last = None

    for arg in args:
        if arg[0] == '-':
            if last:
                cmd_kwargs[last[1:]] = True
            else:
                last = arg
        elif last:
            try:
                val = int(arg)
                cmd_kwargs[last[1:]] = val
            except:
                cmd_kwargs[last[1:]] = arg                
            last = None
        else:
            try:
                val = int(arg)
                cmd_args.append(val)
            except:
                cmd_args.append(arg)

    if last:
        cmd_kwargs[last[1:]] = True

    if cmd == 'help':
        help(*args)
    elif cmd == 'version':
        print 'sbs-%s' % version
    else:
        if cmd in valid:
            sys.modules[__name__].__dict__[cmd](*cmd_args, **cmd_kwargs)
